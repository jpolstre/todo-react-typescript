{"version":3,"sources":["store/ducks/tasks/types.ts","store/ducks/tasks/index.ts","store/ducks/rootReducer.ts","store/index.ts","components/Layout/styles.ts","components/Header/styles.ts","components/Header/index.tsx","store/ducks/tasks/actions.ts","components/TaskItem/styles.ts","components/TaskItem/index.tsx","components/Notify/styles.ts","components/Notify/Notifyelem.tsx","components/Notify/index.ts","components/ListTasks/styles.ts","components/ListTasks/index.tsx","components/Footer/styles.ts","components/Footer/index.tsx","components/Layout/index.tsx","styles/GlobalStyles.ts","App.tsx","index.tsx"],"names":["ActionTypes","INITIAL_STATE","tasks","i","push","id","name","completed","initTasks","filter","notify","reducer","state","action","type","ADD_TASK","task","trim","some","toUpperCase","color","mesasge","concat","EDIT_TASK","index","findIndex","DELETE_TASK","TOGGLE_COMPLETED","indx","t","SET_FILTER","option","rootReducer","combineReducers","store","createStore","Grid","styled","div","Head","header","Header","title","setFilter","TaskLi","li","props","Button","button","IconDelete","DeleteForever","IconEdit","Edit","TaskItem","editHandler","dispatch","useDispatch","deleteHandler","window","confirm","onClick","checked","onChange","Notifystyled","CloseIcon","HighlightOff","NotifyElem","removeNotify","containerDiv","useRef","useEffect","current","classList","add","ref","className","NotifyCmp","Date","getTime","this","createNotify","notificationsWrapper","document","getElementById","createElement","body","appendChild","wrapper","prepend","notifyElem","React","Notifyelem","ReactDOM","render","lifeTime","setTimeout","child","querySelector","remove","unmountComponentAtNode","Container","Form","form","Input","insets","input","ListTasks","useSelector","useState","inputText","setText","labelSave","setLabelSave","currentTask","setCurrentTask","inputRef","ulRef","focus","ul","scrollTo","top","scrollHeight","behavior","Notify","filterTasks","useMemo","submitHandler","e","preventDefault","newTask","editTasks","selectionStart","value","length","selectionEnd","onSubmit","autoFocus","target","cancelHandler","map","key","Foot","footer","Footer","Layout","createGlobalStyle","App","GlobalStyles","StrictMode"],"mappings":"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","file":"static/js/main.6aae7982.chunk.js","sourcesContent":["\r\n/**actions types */\r\n\r\nexport enum ActionTypes {\r\n  // LIST_TASK = '@tasks/LIST_TASKS',\r\n  ADD_TASK = '@tasks/ADD_TASK',\r\n  EDIT_TASK = '@tasks/EDIT_TASK',\r\n  DELETE_TASK = '@tasks/DELETE_TASK',\r\n  TOGGLE_COMPLETED = '@tasks/TOGGLE_COMPLETED',\r\n  \r\n  SET_FILTER = '@task/SET_FILTER',\r\n \r\n}\r\n\r\n/**Data types */\r\n\r\nexport interface Task {\r\n  id: number\r\n  name: string\r\n  completed: boolean\r\n}\r\n\r\nexport interface Notify {\r\n  mesasge: string\r\n  color: string\r\n  lifeTime?: number\r\n\r\n}\r\n\r\n\r\n\r\n/**state types */\r\n\r\n\r\nexport interface StateTypes {\r\n  tasks: Task[]\r\n  filter: string\r\n  notify?: Notify | null\r\n}","import { Reducer } from 'redux'\r\n\r\nimport { ActionTypes, StateTypes, Task } from './types'\r\n\r\nconst initTasks = (): Task[] => {\r\n  const tasks:Task[] = []\r\n  for (let i = 1; i <= 5; i++){\r\n    tasks.push({ id: i, name: 'task ' + i, completed: false })\r\n  }\r\n  return tasks\r\n}\r\n\r\nconst INITIAL_STATE: StateTypes = {\r\n  tasks: initTasks(),\r\n  filter: 'ALL',\r\n  notify: null\r\n}\r\n\r\n\r\nconst reducer: Reducer<StateTypes> = (state = INITIAL_STATE, action): StateTypes => {\r\n  switch (action.type) {\r\n    case ActionTypes.ADD_TASK:\r\n      if (action.task.name.trim() === '' || state.tasks.some(task => task.name.toUpperCase() === action.task.name.toUpperCase())) return { ...state, notify: { color: 'negative', mesasge: 'La tarea Ya existe' } }\r\n      return { ...state, tasks: state.tasks.concat(action.task), notify: { color: 'positive', mesasge: 'Tarea crada con exito' } }\r\n    case ActionTypes.EDIT_TASK:\r\n      const index = state.tasks.findIndex(({ id }) => id === action.task.id)\r\n      if (action.task.name.trim() === '' || index === -1 || state.tasks.some(task => task.name === action.task.name && task.id !== action.task.id))\r\n        return { ...state, notify: { color: 'negative', mesasge: 'La tarea ya existe o no puede ser vacia' } }\r\n      const tasks = [...state.tasks]\r\n      tasks[index] = action.task\r\n      return { ...state, tasks, notify: { color: 'positive', mesasge: 'Tarea editada con exito' } }\r\n    case ActionTypes.DELETE_TASK:\r\n      return { ...state, tasks: state.tasks.filter(task => task.id !== action.id), notify: { color: 'positive', mesasge: 'Tarea eliminada !!!' } }\r\n    case ActionTypes.TOGGLE_COMPLETED:\r\n      const indx = state.tasks.findIndex(({ id }) => id === action.id)\r\n      const t = [...state.tasks]\r\n      t[indx].completed = ! t[indx].completed\r\n      return { ...state, tasks: t }\r\n    case ActionTypes.SET_FILTER:\r\n      return {...state, filter: action.option}\r\n    default://list task por defecto.\r\n      return state\r\n  }\r\n}\r\n\r\nexport default reducer","import { combineReducers } from 'redux'\r\n\r\nimport tasks from './tasks'\r\n\r\nconst rootReducer = combineReducers({\r\n  tasks\r\n})\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>\r\n\r\n\r\nexport default rootReducer","import { createStore, Store } from 'redux'\r\n\r\nimport rootReducer, { AppState } from './ducks/rootReducer'\r\n\r\nconst store: Store<AppState> = createStore(rootReducer)\r\n\r\nexport default store","import styled from 'styled-components'\r\n\r\n// HE - Header\r\n// LT - List Tasks\r\n// FO - Footer\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  \r\n  grid-template-columns:240px auto 240px;\r\n  grid-template-rows:55px  auto 75px;\r\n  \r\n  grid-template-areas:\r\n  'HE HE HE'\r\n  'LT LT LT'\r\n  'FO FO FO';\r\n\r\n  height: 100vh;\r\n\r\n  @media (max-width: 320px){\r\n    grid-template-areas:\r\n    'HE'\r\n    'LT'\r\n    'FO';\r\n\r\n    zoom: 10 !important;\r\n    user-zoom: 10;\r\n  }\r\n`;\r\n\r\nexport default Grid","import styled from 'styled-components'\r\n\r\nexport const Head = styled.header`\r\n  grid-area: HE;\r\n\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  background-color: var(--secondary);\r\n\r\n  height:55px;\r\n\r\n  > h2 {\r\n    color: var(--white);\r\n  }\r\n`","import React from 'react'\r\nimport { Head } from './styles'\r\n\r\ninterface OwnProps {\r\n  title: string\r\n}\r\n\r\nconst Header: React.FC<OwnProps> = ({title}) => {\r\n  return (\r\n    <Head>\r\n      <h2>{title}</h2>\r\n    </Head>\r\n  )\r\n}\r\n\r\nexport default Header","import { ActionTypes, Task } from './types'\r\n\r\n\r\n// export const listTasks = () => ({ type: TasksActionTypes.LIST_TASK })\r\nexport const addTasks = (task: Task) => ({ type: ActionTypes.ADD_TASK, task })\r\nexport const editTasks = (task: Task) => ({ type: ActionTypes.EDIT_TASK, task })\r\nexport const deleteTasks = (id: number) => ({ type: ActionTypes.DELETE_TASK, id })\r\nexport const toggleCompleted = (id: number) => ({ type: ActionTypes.TOGGLE_COMPLETED, id })\r\n\r\n\r\nexport const setFilter = (option: string) => ({ type: ActionTypes.SET_FILTER, option })\r\n\r\n","import styled from 'styled-components'\r\n\r\nimport { Edit, DeleteForever } from '@styled-icons/material'\r\n\r\nimport { Props } from '.'\r\n\r\nexport const TaskLi = styled.li<Props>`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  min-width: 400px;\r\n\r\n  padding: 8px 20px;\r\n  margin: 0 2px 8px 0;\r\n\r\n  background-color: var(--quaternary);\r\n\r\n  border-radius: 4px;\r\n \r\n &:last-child {\r\n  margin: 0 2px 0 0;\r\n }\r\n\r\n > div:first-child   {\r\n   padding: 10px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n\r\n  cursor: pointer;\r\n\r\n  > span {\r\n    -webkit-user-select: none;\r\n    margin-left: 4px;\r\n\r\n    color: var(--white);\r\n\r\n    width: 300px;\r\n\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n\r\n    font-size: 1rem;\r\n    opacity: .9;\r\n    text-decoration: ${(props) => props.task.completed ? 'line-through' : 'normal'};\r\n    font-style: ${(props) => props.task.completed ? 'italic' : 'normal'};\r\n  }\r\n\r\n  > input {\r\n    cursor: pointer;\r\n  }\r\n\r\n \r\n }`;\r\n\r\n\r\nexport const Button = styled.button`\r\n  padding: 5px;\r\n\r\n  border-radius: 50%;\r\n  cursor: pointer;\r\n  background-color: var(--focus);\r\n\r\n  border: 1px solid transparent;\r\n\r\n  transition: all .3s ease-in-out;\r\n\r\n\r\n  &:last-child{\r\n    margin-left: 4px;\r\n    background-color: var(--negative);\r\n\r\n  }\r\n\r\n  &:last-child:hover{\r\n    border: 1px solid var(--negative);\r\n    box-shadow: 0 0 5px var(--negative);\r\n\r\n  }\r\n\r\n  &:hover {\r\n    border: 1px solid var(--focus);\r\n    box-shadow: 0 0 5px var(--focus);\r\n  }\r\n  \r\n `;\r\n\r\nexport const IconDelete = styled(DeleteForever)`\r\n  width: 20px;\r\n  height: 20px;\r\n`;\r\n\r\nexport const IconEdit = styled(Edit)`\r\n  width: 20px;\r\n  height: 20px;\r\n`;","import React from 'react'\r\n\r\nimport { useDispatch } from 'react-redux'\r\nimport { Task } from '../../store/ducks/tasks/types'\r\nimport { deleteTasks, toggleCompleted } from '../../store/ducks/tasks/actions'\r\n\r\nimport { TaskLi, Button, IconEdit, IconDelete } from './styles'\r\n\r\nexport interface Props {\r\n\ttask: Task\r\n}\r\n\r\ninterface ActionProps {\r\n\teditHandler(task: Task): void\r\n}\r\n\r\ntype AllProps = Props & ActionProps\r\n\r\nconst TaskItem: React.FC<AllProps> = ({ task, editHandler }) => {\r\n\tconst dispatch = useDispatch()\r\n\r\n\tconst deleteHandler = (task: Task) => {\r\n\t\tif (window.confirm('Seguro elimar la tarea \\n' + task.name + '?')) dispatch(deleteTasks(task.id))\r\n\t}\r\n\r\n\treturn (\r\n\t\t<TaskLi task={task}>\r\n\t\t\t<div onClick={()=>dispatch(toggleCompleted(task.id))}>\r\n\t\t\t\t<input type=\"checkbox\" checked={task.completed} onChange={()=>{return}}/>\r\n\t\t\t\t<span>{task.name}</span>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<Button onClick={() => editHandler(task)}>\r\n\t\t\t\t\t<IconEdit />\r\n\t\t\t\t</Button>\r\n\t\t\t\t<Button onClick={() => deleteHandler(task)}>\r\n\t\t\t\t\t<IconDelete />\r\n\t\t\t\t</Button>\r\n\t\t\t</div>\r\n\t\t</TaskLi>\r\n\t)\r\n}\r\n\r\nexport default TaskItem\r\n","import styled from 'styled-components'\r\n\r\nimport { HighlightOff } from '@styled-icons/material'\r\n\r\nimport { Props } from './Notifyelem'\r\n\r\nexport const Notifystyled = styled.div<Props>`\r\n \r\n  min-height: 35px;\r\n\r\n  padding: 10px 20px;\r\n\r\n  margin-bottom: 4px;\r\n\r\n  background-color: ${(props) => `var(--${props.notify.color})`};\r\n  color: var(--white);\r\n\r\n  border-radius: 4px;\r\n\r\n  font-weight: 300px;\r\n  font-size: 0.9rem;\r\n\r\n  position: relative;\r\n\r\n  transition: all 0.3s ease-in-out;\r\n\r\n  opacity:0;\r\n\r\n  border: 1px solid ${(props) => `var(--${props.notify.color})`};\r\n  box-shadow: 0 0 5px ${(props) => `var(--${props.notify.color})`};\r\n  \r\n  > span:first-child {\r\n    position: absolute;\r\n    top: 1px;\r\n    right: 1px;\r\n  }\r\n  \r\n > span.content-notify {\r\n  line-height: 35px;\r\n  padding: 5px 0;\r\n }\r\n\r\n &.show{\r\n  opacity: 1;\r\n }\r\n\r\n &.hide{\r\n   opacity: 0;\r\n }\r\n`;\r\n\r\nexport const CloseIcon = styled(HighlightOff)`\r\n  width: 18px;\r\n  height: 18px;\r\n  cursor: pointer;\r\n`;\r\n\r\n","import React, {useRef, useEffect} from 'react'\r\nimport { Notify } from '../../store/ducks/tasks/types'\r\n\r\nimport { Notifystyled, CloseIcon } from './styles'\r\n\r\nexport interface Props {\r\n\tnotify: Notify\r\n\t// removeNotify: (ele: HTMLDivElement | null)=> void\r\n\t// reference: React.RefObject<HTMLDivElement>\r\n}\r\n\r\ninterface OwnProps {\r\n\tremoveNotify(id: string): void\r\n\tid: string\r\n}\r\n\r\ntype AllProps = Props & OwnProps \r\n// reference\r\nconst NotifyElem: React.FC<AllProps> = ({ notify, removeNotify, id }) => {\r\n\tconst containerDiv = useRef<HTMLDivElement>(null)\r\n\r\n\tuseEffect(() => {\r\n\t\t// setTimeout(() => {\r\n\t\t\tcontainerDiv.current?.classList.add('show')\r\n\t\t// }, 300)\r\n\t}, [containerDiv])\r\n\r\n\r\n\tconst handlerRemove = () => {\r\n\t\t// removeNotify(reference.current)\r\n\t\tremoveNotify(id)\r\n\t}\r\n\treturn (\r\n\t\t<Notifystyled notify={notify} ref={containerDiv}>\r\n\t\t\t<span onClick={() => handlerRemove()}>\r\n\t\t\t\t<CloseIcon />\r\n\t\t\t</span>\r\n\t\t\t<span className=\"content-notify\">{notify.mesasge}</span>\r\n\t\t</Notifystyled>\r\n\t)\r\n}\r\n\r\nexport default NotifyElem\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport { Notify } from '../../store/ducks/tasks/types'\r\nimport Notifyelem from './Notifyelem'\r\n\r\nclass NotifyCmp {\r\n\tprivate notify: Notify\r\n\t// private wrapperRef = React.createRef<HTMLDivElement>();\r\n\tprivate id: string = new Date().getTime() + ''\r\n\r\n\tconstructor(notify: Notify) {\r\n\t\tthis.notify = notify\r\n\t\tthis.createNotify()\r\n\t}\r\n\r\n\tcreateNotify() {\r\n\r\n\t\tlet notificationsWrapper = document.getElementById('wrapper-notifications')\r\n\r\n\t\tif (!notificationsWrapper) {\r\n\t\t\tnotificationsWrapper = document.createElement('div')\r\n\t\t\tnotificationsWrapper.id = 'wrapper-notifications'\r\n\t\t\tnotificationsWrapper.classList.add('wrapper-notifications')\r\n\t\t\tdocument.body.appendChild(notificationsWrapper)\r\n\t\t}\r\n\r\n\t\tconst wrapper = document.createElement('div')\r\n\t\twrapper.id = this.id\r\n\t\tnotificationsWrapper.prepend(wrapper)\r\n\t\t\r\n\r\n\t\t// const notifyElem = <Notifyelem notify={this.notify} removeNotify={this.removeNotify}/>\r\n\t\t//reference:this.wrapperRef\r\n\t\tconst notifyElem = React.createElement(Notifyelem, { notify: this.notify, removeNotify: this.removeNotify, id: this.id })\r\n\t\tReactDOM.render(notifyElem, wrapper)\r\n\r\n\t\tconst lifeTime = this.notify.lifeTime || 7000\r\n\t\tsetTimeout(() => {\r\n\t\t\r\n\t\t\t// this.removeNotify(this.wrapperRef.current)\r\n\t\t\tthis.removeNotify(this.id)\r\n\t\t}, lifeTime)\r\n\t}\r\n// elem: HTMLDivElement | null\r\n\tremoveNotify(id: string) {\r\n\t\tconst wrapper =  document.getElementById(id)\r\n\t\tif (wrapper) {\r\n\t\t\tconst child = wrapper.querySelector('div')\r\n\t\t\tchild?.classList.remove('show')\r\n\t\t\tchild?.classList.add('hide')\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tReactDOM.unmountComponentAtNode(wrapper)\r\n\t\t\t\twrapper.remove()\r\n\t\t\t}, 300)\r\n\r\n\t\t\t\r\n\t\t\t// elem?.remove()\r\n\t\t}\r\n\t\t\r\n\t}\r\n}\r\n\r\nexport default NotifyCmp\r\n","import styled from 'styled-components'\r\n\r\ninterface Props {\r\n  insets?: boolean\r\n}\r\n\r\nexport const Container = styled.div`\r\n  grid-area: LT;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  background-color: var(--tertiary);\r\n\r\n  padding-bottom: 10px;\r\n\r\n\r\n  min-height: calc(100vh - 130px);\r\n\r\n  > ul {\r\n    /* min-height: calc(100vh - 55px - 45px - 75px -20px -10px); */\r\n\r\n    overflow-y: scroll;\r\n\r\n    ::-webkit-scrollbar {\r\n      width: 4px;\r\n    }\r\n    ::-webkit-scrollbar-thumb {\r\n      background-color: var(--focus);\r\n      border-radius: 4px;\r\n    }\r\n\r\n    ::-webkit-scrollbar-track {\r\n      background-color: var(--secondary);\r\n    }\r\n\r\n  }\r\n`;\r\n\r\nexport const Form = styled.form`\r\n  display: flex;\r\n  flex-direction: row;\r\n\r\n  justify-content: start;\r\n  align-items: center;\r\n  \r\n  padding: 10px 0;\r\n\r\n\r\n  > button {\r\n    margin-left: 4px;\r\n  }\r\n`\r\n\r\nexport const Separator = styled.div<Props>`\r\n  height: 1px;\r\n  width: ${(props)=>props.insets? '80%': '100%'};\r\n\r\n  background-color: var(--white);\r\n  \r\n  margin: 15px 0; \r\n  opacity: .1;\r\n\r\n` \r\nexport const Input = styled.input`\r\n  padding:10px;\r\n  border-radius: 4px;\r\n  \r\n  font-size: 1.1rem;\r\n  font-weight: 500;\r\n  color: var(--primary);\r\n  border: 1px solid transparent;\r\n  \r\n  min-width: 328px;\r\n  \r\n\r\n  transition: all 0.3s ease-in-out;\r\n  &:hover, &:focus {\r\n    border: 1px solid var(--focus);\r\n    box-shadow: 0 0 5px var(--focus);\r\n  }\r\n \r\n`\r\n\r\nexport const Button = styled.button`\r\n  padding: 12.5px 10px;\r\n  border-radius: 4px;\r\n\r\n  background-color: var(--focus);\r\n\r\n  font-weight: 500;\r\n\r\n  border: 1px solid transparent;\r\n\r\n  transition: all 0.3s ease-in-out;\r\n\r\n  cursor: pointer;\r\n\r\n  &:hover, &:focus {\r\n    border: 1px solid var(--focus);\r\n    box-shadow: 0 0 5px var(--focus);\r\n  }\r\n`","import React, { useState, useRef, useEffect, useMemo } from 'react'\r\n\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nimport { AppState } from '../../store/ducks/rootReducer'\r\n\r\nimport { addTasks, editTasks } from '../../store/ducks/tasks/actions'\r\n\r\nimport { Task } from '../../store/ducks/tasks/types'\r\n\r\nimport TaskItem from '../TaskItem'\r\nimport Notify from '../Notify'\r\n\r\n\r\nimport { Container, Form, Input, Button } from './styles'\r\n\r\n\r\nconst ListTasks: React.FC = () => {\r\n\tconst tasks = useSelector((state: AppState) => state.tasks.tasks)\r\n\r\n\tconst notify = useSelector((state: AppState) => state.tasks.notify)\r\n\t\r\n\tconst filter = useSelector((state: AppState) => state.tasks.filter)\r\n\r\n\tconst dispatch = useDispatch()\r\n\r\n\tconst [ inputText, setText ] = useState<string>('')\r\n\r\n\tconst [ labelSave, setLabelSave ] = useState<string>('ADD')\r\n\r\n\tconst [ currentTask, setCurrentTask ] = useState<Task>()\r\n\r\n\tconst inputRef = useRef<HTMLInputElement>(null)\r\n\tconst ulRef = useRef<HTMLUListElement>(null)\r\n\r\n\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tif (notify) {\r\n\t\t\t\tif (notify.color !== 'negative') {\r\n\t\t\t\t\tsetText('')\r\n\t\t\t\t\tinputRef.current?.focus()\r\n\r\n\t\t\t\t\tif (labelSave === 'SAVE') {\r\n\t\t\t\t\t\tsetLabelSave('ADD')\r\n\r\n\t\t\t\t\t\r\n\t\t\t\t\t} \r\n\t\t\t\t}\r\n\t\t\t\tconst ul = ulRef.current\r\n\t\t\t\tif (notify.mesasge === 'Tarea crada con exito' && ul) {\r\n\t\t\t\t\tul.scrollTo({ top: ul.scrollHeight, behavior: 'smooth' });\r\n\t\t\t\t}\r\n\t\t\t\tnew Notify(notify)\r\n\t\t\t}\r\n\t\t},\r\n\t\t// eslint-disable-next-line \r\n\t\t[ notify ]\r\n\t)\r\n\r\n\t// useEffect(() => {\r\n\t// \tconsole.log('scroll');\r\n\t// \tconst ul = ulRef.current\r\n\t// \tif (ul) {\r\n\t// \t\t// setTimeout(() => {\r\n\t// \t\t// console.log(ul);\r\n\r\n\t// \t\t\tul.scrollTo({top: ul.scrollHeight, behavior: 'smooth'});\r\n\t// \t\t// },1000)\r\n\t// \t}\r\n\t// }, [tasks, ulRef])\r\n\r\n\tconst filterTasks = useMemo(() => {\r\n\t\tswitch (filter) {\r\n\t\t\tcase 'COMPLETED':\r\n\t\t\t\treturn tasks.filter(task=>task.completed)\r\n\t\t\tcase 'UNCOMPLETED':\r\n\t\t\t\treturn tasks.filter(task => !task.completed)\r\n\t\t\tdefault:\r\n\t\t\t\treturn tasks\r\n\t\t}\r\n\t },[filter, tasks])\r\n\r\n\tconst submitHandler = (e: React.FormEvent<HTMLFormElement>) => {\r\n\t\te.preventDefault()\r\n\r\n\t\tif (labelSave === 'ADD') {\r\n\t\t\tconst newTask: Task = {\r\n\t\t\t\tid: new Date().getTime(),\r\n\r\n\t\t\t\tname: inputText,\r\n\r\n\t\t\t\tcompleted: false\r\n\t\t\t}\r\n\r\n\t\t\tdispatch(addTasks(newTask))\r\n\r\n\t\t} else {\r\n\t\t\tif (currentTask) dispatch(editTasks({...currentTask, name: inputText}))\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\tconst editHandler = (task: Task) => {\r\n\t\tsetLabelSave('SAVE')\r\n\t\tsetText(task.name)\r\n\t\tsetCurrentTask(task)\r\n\t\tsetTimeout(() => {\r\n\t\t\tconst input = inputRef.current\r\n\t\t\tif (input) {\r\n\t\t\t\tinput.selectionStart = input.value.length\r\n\t\t\t\tinput.selectionEnd = input.value.length\r\n\t\t\t\tinput.focus()\r\n\t\t\t}\r\n\t\t},10)\r\n\r\n\t}\r\n\r\n\tconst cancelHandler = () => {\r\n\t\tsetLabelSave('ADD')\r\n\t\tsetText('')\r\n\t\tinputRef.current?.focus()\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Container>\r\n\t\t\t<Form onSubmit={(e) => submitHandler(e)} >\r\n\t\t\t\t<Input autoFocus type='text' value={inputText} onChange={(e) => setText(e.target.value)} ref={inputRef} />\r\n\t\t\t\t<Button type='submit'>{labelSave}</Button>\r\n\t\t\t\t<Button type='button' onClick={() =>  cancelHandler()}>Cancel</Button>\r\n\t\t\t</Form>\r\n\t\t\t{/* <Separator insets /> */}\r\n\t\t\t<ul ref={ulRef}>{filterTasks.map((task) => <TaskItem key={task.id} task={task} editHandler={editHandler} />)}</ul>\r\n\t\t</Container>\r\n\t)\r\n}\r\n\r\nexport default ListTasks\r\n","import styled from 'styled-components'\r\n\r\nexport const Foot = styled.footer`\r\n  grid-area: FO;\r\n\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  background-color: var(--secondary);\r\n\r\n  height: 75px;\r\n\r\n > span {\r\n   color: var(--white);\r\n   font-weight: 300;\r\n }\r\n`\r\n\r\nexport const Button = styled.button`\r\n  margin-left: 4px;\r\n\r\n  padding: 5px;\r\n\r\n  border-radius: 4px;\r\n\r\n  cursor: pointer;\r\n\r\n  font-weight: 500;\r\n\r\n  border: 1px solid transparent;\r\n\r\n  &.active{\r\n    background-color: var(--focus);\r\n    border: 1px solid  var(--focus);\r\n    box-shadow: 0 0 5px var(--focus);\r\n  }\r\n  &:hover {\r\n    background-color: var(--focus);\r\n    border: 1px solid  var(--focus);\r\n    box-shadow: 0 0 5px var(--focus);\r\n  }\r\n\r\n  &:last-child {\r\n    margin-left: none;\r\n  }\r\n\r\n`;","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { Foot, Button } from './styles'\r\nimport { setFilter } from '../../store/ducks/tasks/actions'\r\nimport { AppState } from '../../store/ducks/rootReducer'\r\n\r\nconst Footer: React.FC = () => {\r\n\tconst dispatch = useDispatch()\r\n\r\n\tconst filter = useSelector((state: AppState) => state.tasks.filter)\r\n\treturn (\r\n\t\t<Foot>\r\n\t\t\t<Button onClick={() => dispatch(setFilter('ALL'))} className={filter === 'ALL' ? 'active' : ''}>\r\n\t\t\t\t<span>All</span>\r\n\t\t\t</Button>\r\n\t\t\t<Button onClick={() => dispatch(setFilter('COMPLETED'))} className={filter === 'COMPLETED' ? 'active' : ''}>\r\n\t\t\t\t<span>Completed</span>\r\n\t\t\t</Button>\r\n\t\t\t<Button onClick={() => dispatch(setFilter('UNCOMPLETED'))} className={filter === 'UNCOMPLETED' ? 'active' : ''}>\r\n\t\t\t\t<span>Uncompleted</span>\r\n\t\t\t</Button>\r\n\t\t</Foot>\r\n\t)\r\n}\r\n\r\nexport default Footer\r\n","import React from 'react'\r\nimport Grid from './styles'\r\nimport Header from '../Header'\r\nimport ListTasks from '../ListTasks'\r\nimport Footer from '../Footer'\r\n\r\nconst Layout: React.FC = () => {\r\n\treturn (\r\n\t\t<Grid>\r\n\t\t\t<Header title='TaskApp' />\r\n\t\t\t<ListTasks />\r\n\t\t\t<Footer />\r\n\t\t</Grid>\r\n\t)\r\n}\r\n\r\nexport default Layout\r\n","import { createGlobalStyle } from 'styled-components'\r\n\r\nexport default createGlobalStyle`\r\n  *{\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  html, body, #root {\r\n   height: 100vh; \r\n  }\r\n  *, button, input{\r\n    border: 0;\r\n    outline: 0;\r\n\r\n\r\n    font-family: 'Roboto', sans-serif;\r\n  }\r\n\r\n  .wrapper-notifications{\r\n    position: absolute;\r\n    right: 2rem;\r\n    bottom:5rem;\r\n  }\r\n\r\n  :root {\r\n    --primary: #36393f;\r\n    --secondary: #2f3136;\r\n    --tertiary: rgb(32, 34, 37);\r\n    --quaternary: #292b2f;\r\n    --quinary: #393d42\r\n    --senary: #828386;\r\n\r\n    --negative: #f84a4b;\r\n    --positive: #21ba45;\r\n\r\n    --white: #ffffff;\r\n\r\n    --focus: #51cbee;\r\n  }\r\n\r\n  \r\n`;","import React from 'react'\n\nimport { Provider } from 'react-redux'\n\nimport store from './store'\n\nimport Layout from './components/Layout'\nimport GlobalStyles from './styles/GlobalStyles'\n\nconst App: React.FC = () => {\n\treturn (\n\t\t<Provider store={store}>\n\t\t\t<Layout />\n\t\t\t<GlobalStyles />\n\t\t</Provider>\n\t)\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}